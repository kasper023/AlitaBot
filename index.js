const TelegramBot = require('node-telegram-bot-api');
// const token = '1202033897:AAHglJA6iLKaP6EA4j47tdw_XwQUtF7sqGA'; // Alita_test
const token = '1133025600:AAF2ASdpr1PfJ5ci0hWhlEglUa7T5T0j2KM'; // Alita
// –í–∫–ª—é—á–∏—Ç—å –æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Telegram, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
// –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://core.telegram.org/bots/api#getupdates
const bot = new TelegramBot(token, { polling: true });
const TIME_ZONE = 3;
// const TIME_ZONE = 0;
const request = require('request');
const controller = require('./controllers/user')

let message = require('./messages/messages').message
let remindingUsers = require('./functions/reminding').remindingUsers

bot.onText(/^\/start/, async function (msg, match) {
    // await console.log( message("SDds").before);
    try{
        const userId = msg.from.id;
        const userNameMsg = msg.from.first_name;
        // await bot.sendMessage(userId,  message(userNameMsg).before[0].text)
        await controller.post({userId,userName: userNameMsg})
        const {userName} = await controller.get(userId)
        // console.log('start')

        await setTimeout(()=> {
            let text = "–ü—Ä–∏–≤–µ—Ç, " + userName + "! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Ç–∞. –° —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —è –±—É–¥—É —Ç–≤–æ–∏–º –¥—Ä—É–≥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–∞—Å—Ç —Ç–µ–±–µ —É—á–∏—Ç—å—Å—è –ø–ª–æ—Ö–æ) –Ø –±—É–¥—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –≤ —Å–∞–º–æ–º —Ç—Ä—É–¥–Ω–æ–º ‚Äú–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å‚Äù. –ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞—Ç—å —Ç–µ–±—è, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª –≤ —Ç–æ–Ω—É—Å–µ –∏ —Ç–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ —É—á–∏—Ç—å—Å—è –Ω–µ —É–≥–∞—Å–∞–ª–æ. –ñ–¥–∏ –æ—Ç –º–µ–Ω—è –º–Ω–æ–≥–æ –∑–∞–¥–∞—á. –Ø –±—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.";
            bot.sendMessage(userId, text);
        }, 750)

        await setTimeout(()=> {
            bot.sendMessage(userId, '–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–º–µ—Å—Ç–µ —Å–æ —à–∫–æ–ª–æ–π Decode, —è –≤–µ—Ä—é –≤ —Ç–µ–±—è :)');
        }, 1000)

        const reqData = await req('http://185.125.46.93:3007/all_users')
        // console.log(reqData);
        
        let groups = reqData.map(item => {
            if(item.title.type != 'private' && item.title.title != 'Decode-New-Generation!') {
                return [{
                    text: item.title.title,
                    callback_data: JSON.stringify(['start', item.title.id])
                }]
            }
        })
        groups = groups.filter(item => {
            return item != undefined;
        })
        await setTimeout(() => {
            let option = {
                reply_markup: JSON.stringify({
                    inline_keyboard: groups
                })
            }
            bot.sendMessage(userId, '–ö–∞–∫–æ–π –∫—É—Ä—Å —Ç—ã –∏–∑—É—á–∞–µ—à—å?', option)
        }, 1500)
    }
    catch (e) {
        await console.log(e)
    }

});


bot.onText(/^\/get_task/, async function (msg, match) {
    await console.log(match);
    try{
        bot.sendMessage(msg.from.id, '–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...')
        // let {id} = msg.from
        // let user = await controller.get(id)
        // let {course} = user
        // let coursesName = []

        // const api = 'http://jsrush.decode.kz:5001/api/bot/getSectionByCourseId?courseId=1'
        // const reqData = await req(api)
        // await reqData.forEach(item => {
        //     coursesName.push([{
        //         text: item.name,
        //         callback_data: JSON.stringify(['course', item.id])
        //     }])
        // })

        // let option = {
        //     reply_markup: JSON.stringify({
        //         inline_keyboard: coursesName
        //     })
        // }
        // bot.sendMessage(id, '–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª', option)
        
    }
    catch (e) {
        await console.log(e)
    }

});


bot.onText(/^\/set_name/, async function (msg, match) {
    await console.log(match);
    await console.log(msg);
    try{
        let {id} = msg.from
        let {text} = msg
        let input = text.split(' ')
        if(input[1]) {
            await controller.set_name({userId:id, userName:input[1]})
            await bot.sendMessage(id, `–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±—è ${input[1]}`)
        }
        else
            await bot.sendMessage(id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É: \n\n /set_name –ò–º—è')
    }
    catch (e) {
        await console.log(e)
    }
});


bot.on('callback_query', async msg => {
    try {
        let {data} = msg
        const {id} = msg.from
        const {message_id} = msg.message
        const name = msg.from.first_name
        let schedule
        let course
        data = data.split(',')
        data[0] = data[0].slice(2, data[0].length - 1)
        data[1] = data[1].slice(0, data[1].length - 1)
        if(data[0] === 'start') {
            const api = 'http://185.125.46.93:3007/all_users'
            const reqData = await req(api)
            
            await reqData.forEach(item => {            
                if(String(item.title.id) === String(data[1])) {
                    course = item.title.title
                    schedule = item.time
                }
            })
            
            course = course.substr(0,course.indexOf(' '))
            controller.put({userId:id, course:course, time: schedule})
        
            
            let days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']
            
            setTimeout(() => {
                bot.sendMessage(id, "–Ø –∑–∞–ø–∏—Å–∞–ª–∞ —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            }, 1500)
        }
        if(data[0] === 'course') {
            const api = 'http://jsrush.decode.kz:5001/api/bot/getLessonsBySectionId?sectionId=' + data[1]
            const reqData = await req(api)
            let lessonsName = []
            await reqData.forEach(item => {
                lessonsName.push([{
                    text: item.title,
                    callback_data: JSON.stringify(['lesson', item.id])
                }])
            })
    
            let option = {
                reply_markup: JSON.stringify({
                    inline_keyboard: lessonsName
                })
            }
            bot.sendMessage(id, '–í—ã–±–µ—Ä–∏ —Ç–µ–º—É', option)
        }
        if(data[0] === 'lesson') {
            const api = 'http://jsrush.decode.kz:5001/api/bot/getRandomTasksByLessonId?lessonId=' + data[1]
            const reqData = await req(api)
            // let lessonsName = []
            // await reqData.forEach(item => {
            //     lessonsName.push([{
            //         text: item.title,
            //         callback_data: JSON.stringify(['lesson', item.id])
            //     }])
            // })
            if(!reqData) {
                bot.sendMessage(id, '–ó–∞–¥–∞—á–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∫–æ–º–∞–Ω–¥–∞ Decode –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ—â–µ–Ω–∏—è')
            }
            else {
                bot.sendMessage(id, '<code>'+ reqData.requirements +'</code>',{
                    parse_mode: 'Markdown'
                })
            }
        }
        bot.deleteMessage(id, message_id)
    } catch (e) {
        console.log(e.message);
    }
})


bot.on('message', (msg) => {
    const message = msg.text;
    const {id} = msg.from
    if (message === '–°–¥–µ–ª–∞–ª(–∞)!') {
        setTimeout(() => {
            bot.sendMessage(id, "–£–º–Ω–∏—Ü–∞, —è —Ç–æ–±–æ–π –≥–æ—Ä–∂—É—Å—å!")
        }, 1000)
    }
    if (message === '–°–µ–π—á–∞—Å –Ω–∞—á–Ω—É') {
        setTimeout(() => {
            bot.sendMessage(id, "–£–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è. –£–¥–∞—á–∏)")
        }, 1000)
    }
    if (message === '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, –≤—Å–µ –ø–æ–Ω—è–ª(–∞)') {
        setTimeout(() => {
            bot.sendMessage(id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —è —Ä–∞–¥–∞ –∑–∞ —Ç–µ–±—èüòå")
        }, 1000)
    }
    if (message === '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, –≤—Å–µ –ø–æ–Ω—è–ª(–∞)') {
        setTimeout(() => {
            bot.sendMessage(id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —è —Ä–∞–¥–∞ –∑–∞ —Ç–µ–±—èüòå")
        }, 1000)
    }
    if (message === '–í—Ä–æ–¥–µ, –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ') {
        setTimeout(() => {
            bot.sendMessage(id, "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º. –£–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—å—Å—è‚ò∫")
        }, 1000)
    }
    if (message === '–ü—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª') {
        setTimeout(() => {
            bot.sendMessage(id, "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è. –ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
        }, 1000)
    }
})


const cron = require('node-cron');
cron.schedule('*/10 * * * *', async () => {
    await remindingUsers(bot)
});


async function req(api) {
    try {
        return new Promise((resolve, reject) => {
            request(api, { json: true }, async (err, res, body) => {
                if (err) return console.log(err);
                resolve(res.body);
            })            
          });
    }
    catch (e) {
        await console.log(e)
    }
}

